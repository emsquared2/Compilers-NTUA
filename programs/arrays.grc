$$
  This program tests the use of array structures with multiple dimensions as
  arguments, parameters, variables, l-values and r-values.  It also includes
  mildly complex arguments given to function calls and nested while loops
  without blocks.
$$

fun main () : nothing

  var foo : int[11];
  var bar : char[2][5][13];
  var zen : int[5][10];

    fun arrayProc (ref x : int[]; ref y : char[][5][13]; ref z : int[][10]) : nothing

      var a : int [15];
      var b : char [2][10][13];
      var i, j, k : int;
      var s : int;

      fun initializeArrays (ref a : int []; ref b : char [][10][13]) : int

      { $ initializeArrays
        i <- 0;
        while i < 15 do {
          a[i] <- i * 4 + 3 mod 5;
          i <- i + 1;
        }

        i <- 0;
        j <- 0;
        k <- 0;
        while i < 2 do {
          while j < 10 do {
            while k < 13 do {
              b[i][j][k] <- chr((i + j + k) mod 26 + ascii('A'));
              k <- k + 1;
            }
            j <- j + 1;
          }
          i <- i + 1;
        }
        return 0;
      }

    { $ arrayProc

      if initializeArrays(a, b) # 0 then {
        writeString("Error occurred!\n");
        return;
      }

      i <- 0;
      s <- 11;
      while i < s do {
        x[i] <- a[i];
        i <- i + 1;
      }

      i <- 0;
      while i < 5 do {
        z[i][9] <- 0;
        j <- 0;
        while j < 9 do {
          writeInteger(j);
          z[i][j] <- 1;
          j <- j + 1;
        }
        i <- i + 1;
      }
      writeString("\n");

      i <- 0;
      j <- 1;
      while i < j and z[j][i] # 0 do {
        writeInteger(j);
        z[j][i] <- a[i];
        j <- j + 1;
        if j >= 5 then {
          j <- 0;
          i <- i + 1;
        }
      }
      writeString("\n");

      i <- 0;
      j <- 0;
      k <- 0;
      while i < 2 do {
        while j < 4 do {
          while k < 13 do {
            if ascii(b[i][j][k]) >= 65 then
              y[i][j][k] <- b[i][j][k];
            writeInteger(j-k);
            k <- k + 1;
          }
          j <- j + 1;
        }
        i <- i + 1;
      }
      writeString("\n");
    }

{ $ main
  arrayProc(foo, bar, zen);
  writeString("Everything went OK!\n");
}